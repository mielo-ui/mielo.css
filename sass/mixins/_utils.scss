@use "sass:string";
@use "sass:list";
@use "sass:meta";
@use "sass:map";

// Make string with prefix if that string isnt empty
@function prefix-if($source: "", $prefix: "", $is-postfix: false) {
  $prefixed: if($is-postfix, $source + $prefix, $prefix + $source);
  @return if(_is_empty($source), "", $prefixed);
}

// If condition is true - return value, otherwise - empty string
@function if-or-empty($cond, $value) {
  @return if($cond, $value, "");
}

// Mixin expand variables from nested map
// @in: map<key, map | value>
// @out: array<[array<keys>, value]>
@function map-flatten($map, $prefix: ()) {
  $result: ();

  @each $key, $value in $map {
    @if _is-map($value) {
      $flatArray: map-flatten($value, _push($prefix, $key));
      $result: _concat($result, $flatArray);
    } @else {
      $flat: (_push($prefix, $key), $value);
      $result: _push($result, $flat);
    }
  }

  @return $result;
}

// Mixin expand variables from nested map
// @in: map<key, map | value>
// @out: array<array<keys>>
@function map-flatten-keys($map) {
  $flatten: map-flatten($map);
  @return _map($flatten, _first);
}

$number-map: (
  "0": 0,
  "1": 1,
  "2": 2,
  "3": 3,
  "4": 4,
  "5": 5,
  "6": 6,
  "7": 7,
  "8": 8,
  "9": 9,
);

$escape-chars: (
  "!",
  '"',
  "#",
  "$",
  "%",
  "&",
  "'",
  "(",
  ")",
  "*",
  "+",
  ",",
  "-",
  ".",
  "/",
  ":",
  ";",
  "<",
  "=",
  ">",
  "?",
  "@",
  "[",
  "\\",
  "]",
  "^",
  "`",
  "{",
  "|",
  "}",
  "~"
);

// Need for escape string for using as selectors
@function escape-selector($str) {
  $output: "";
  @for $str-index from 1 through string.length($str) {
    $ch: string.slice($str, $str-index, $str-index);
    @if $str-index == 1 and map.has-key($number-map, $ch) {
      $output: $output + "\\3" + $ch + " ";
    } @else if list.index($escape-chars, $ch) != null {
      $output: $output + "\\" + $ch;
    } @else {
      $output: $output + $ch;
    }
  }
  @return $output;
}
