@use "sass:list";
@use "sass:map";
@use "sass:meta";

@use "../utils" as *;

// in:
//   $theme: ("dark" | "light")                  | name for access to core declaration styles
//   $default-vars: vars_map                     | initial default variables
//   $cb: ($theme, $accent, $colors) -> vars_map | callback that returns appearance variables
// out: map<accent_name, vars_map>               | its map with mapped variables by accent
@function accents-map-to-vars($accents-map, $theme, $default-vars, $cb) {
  $accents: map.get($accents-map, $theme);

  $map: (
    "default": $default-vars,
  );

  @each $accent, $colors in $accents {
    $vars: meta.call($cb, $theme, $accent, $colors);
    $map: map.set($map, $accent, $vars);
  }

  @return $map;
}

// in:
//   $name: string                               | component name in kebab-case
//   $theme-vars-map: map<accent_name, vars_map> | component variables by accent
// out: component css variables by accent
@mixin accents-expand-mapped-vars($class, $theme-vars-map) {
  $name: kebab-case($class);

  @each $accent, $vars in $theme-vars-map {
    $flat: map-flatten($vars);

    $accent-class: if($accent != "default", "." + $accent, "");
    $class-name: if($class != "", "." + $class, "");
    $ext: $accent-class + $class-name;

    @if $ext != "" {
      .mie#{$ext} {
        @each $item in $flat {
          $value: list.nth($item, 2);
          $keys: list.nth($item, 1);
          $key: join($keys, "-");

          $name-prop: if($name != "", "-#{$name}", "");

          --mie#{$name-prop}-#{$key}: #{$value};
        }
      }
    } @else {
      @each $item in $flat {
        $value: list.nth($item, 2);
        $keys: list.nth($item, 1);
        $key: join($keys, "-");

        $name-prop: if($name != "", "-#{$name}", "");

        --mie#{$name-prop}-#{$key}: #{$value};
      }
    }
  }
}

// in:
//   $class: string                              | target component class name
//   $default-vars: (dark: vars_map, light: vars_map) | default variables for component
//   $cb: ($theme, $accent, $colors) -> vars_map | callback that returns appearance variables
// out: declare accent vars for component, and apperance
@mixin accents-map-to-component(
  $class,
  $default-vars,
  $cb,
  $accents-map: ("light": (), "dark": ())
) {
  @each $theme in ("light", "dark") {
    $theme-default-vars: map.get($default-vars, $theme);

    $selector: if(
      $theme == "dark",
      '[data-theme="dark"]',
      ':root, [data-theme="light"]'
    );

    $properties: accents-map-to-vars(
      $accents-map,
      $theme,
      $theme-default-vars,
      $cb
    );

    #{$selector} {
      @include accents-expand-mapped-vars($class, $properties);
    }
  }
}
